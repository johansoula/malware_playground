#!/usr/bin/python

import sys
import re
import urllib
import json
import requests


def cascade_api_is_job_running(ip, user, passwd, job_id):
    version  = "5.3" 
    source_type = "jobs"
    url = "https://%s/api/shark/%s/%s/%s/status.json" % (ip, version, source_type, job_id)                                        
    r = requests.get(url,
                 auth = (user, passwd),
                     verify = False,
                     headers = { "content-type" : "application/json" },
                     data = "{ \"state\": \"STOPPED\" , \"clear_packets\": false}",
             )

    if r.status_code != 200:
        return False;


    status = r.json()["state"]
    return (status == "RUNNING")


def cascade_api_stop_job(ip, user, passwd, job_id):
    version  = "5.3" 
    source_type = "jobs"
    url = "https://%s/api/shark/%s/%s/%s/status.json" % (ip, version, source_type, job_id)                                        
    r = requests.put(url,
                 auth = (user, passwd),
                     verify = False,
                     headers = { "content-type" : "application/json" },
                     data = "{ \"state\": \"STOPPED\" , \"clear_packets\": false}",
             )

    return (r.status_code != 200)


def cascade_api_start_job(ip, user, passwd, job_id):
    version  = "5.3" 
    source_type = "jobs"
    url = "https://%s/api/shark/%s/%s/%s/status.json" % (ip, version, source_type, job_id)                                        
    r = requests.put(url,
                 auth = (user, passwd),
                     verify = False,
                     headers = { "content-type" : "application/json" },
                     data = "{ \"state\": \"RUNNING\" , \"clear_packets\": false}",
             )
    return (r.status_code != 200)



def cascade_api_clear_job(ip, user, passwd, job_id):
    version  = "5.3" 
    source_type = "jobs"
    url = "https://%s/api/shark/%s/%s/%s/status.json" % (ip, version, source_type, job_id)                                        
    r = requests.put(url,
                 auth = (user, passwd),
                     verify = False,
                     headers = { "content-type" : "application/json" },
                     data = "{ \"state\": \"STOPPED\" , \"clear_packets\": true}",
             )

    return (r.status_code != 200)



def cascade_api_get_pcap_from_job(ip, user, passwd, job_id):
    version  = "5.3" 
    url = "https://%s/api/shark/%s/jobs/%s/exports.json" % (ip, version, job_id)
    r = requests.post(url, 
                      auth=(user, passwd),   
                      verify = False,
                      headers = { 'content-type' : 'application/json' } ,
                      data = '{"output_format":"PCAP_US"}' , 
                 )
 

    if r.status_code != 201:
        return None


    export_id = r.json()["id"];    
    url = "https://%s/api/shark/%s/jobs/%s/exports/%s.json" % (ip, version, job_id, export_id) 
    r  = requests.get(url, 
                      auth=(user, passwd),   
                      verify = False , 
              )               


    url = "https://%s/api/shark/%s/jobs/%s/exports/%s/packets" % (ip, version, job_id, export_id) 
    r  = requests.get(url, 
                      auth=(user, passwd),   
                      verify = False , 
                      stream = True                                   
              )               

    if r.status_code != 200:
        return None
    
    filename  = "%s_%s.pcap"  % (job_id, export_id)    
    with open(filename, 'wb') as fd:                      
        chunk_size  = 1024                         
        for chunk in r.iter_content(chunk_size):
            fd.write(chunk)
        fd.close    

    return (filename)


ip  = "FIXME" 
user  = 'FIXME'                            
passwd  = 'FIXME'                          
job_1  = "00000591"  #FIXME
job_2 = "000007E1"   #FIXME

job_id = None
if cascade_api_is_job_running(ip, user, passwd, job_1):
    job_id = job_1
    cascade_api_clear_job(ip, user, passwd, job_2)     
    cascade_api_start_job(ip, user, passwd, job_2)
else:
    job_id = job_2
    cascade_api_clear_job(ip, user, passwd, job_1)     
    cascade_api_start_job(ip, user, passwd, job_1)

cascade_api_stop_job(ip, user, passwd, job_id)             

retry = 3
for i in range(0,retry):
    filename = cascade_api_get_pcap_from_job(ip, user, passwd, job_id)      
    if filename:
        sys.stdout.write(filename)
        sys.stdout.flush()
        break

exit(0)
